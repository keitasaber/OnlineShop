@model Model.ViewModel.ProductViewModel
@{
    ViewBag.Title = "Edit";
    Layout = "~/Areas/Admin/Views/Shared/_Layouts.cshtml";
}

@section header{
    Edit new product
}

@using (Html.BeginForm("Edit", "Product", FormMethod.Post))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Add new product</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.Name, new { @class = "form-control", @id = "name" })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.MetaTitle, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.MetaTitle, new { @class = "form-control", @readonly = "readonly", @id = "meta-title" })
                @Html.ValidationMessageFor(model => model.MetaTitle, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.Description, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Image, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10 ">
                @Html.HiddenFor(model => model.Image, new { @id = "data-image", @role = "uploadcare-uploader", @data_clearable = "", @class = "control-label" })
                @Html.ValidationMessageFor(model => model.Image, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.MoreImages, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">                
                <input type="hidden" id="more-image-1" value="@ViewBag.MoreImages[0]" role="uploadcare-uploader" data-clearable />
                &nbsp;&nbsp;&nbsp;
                <input type="hidden" id="more-image-2" value="@ViewBag.MoreImages[1]" role="uploadcare-uploader" data-clearable />
                &nbsp;&nbsp;&nbsp;
                <input type="hidden" id="more-image-3" value="@ViewBag.MoreImages[2]" role="uploadcare-uploader" data-clearable />
                @Html.ValidationMessageFor(model => model.MoreImages, "", new { @class = "text-danger" })                                   
                @Html.HiddenFor(model => model.MoreImages, new { @class = "form-control", @id = "content-more-image" })
                
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.Price, new { @class = "form-control", @id="price" })
                @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CategoryName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("categoryID", (IEnumerable<SelectListItem>)ViewBag.Categories, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.CategoryName, "", new { @class = "text-danger" })
            </div>
        </div>
       
        <div class="form-group">
            @Html.LabelFor(model => model.BrandName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("brandID", (IEnumerable<SelectListItem>)ViewBag.Brands, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.BrandName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Detail, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.Detail, new { @class = "form-control", @id = "detail" })
                @Html.ValidationMessageFor(model => model.Detail, "", new { @class = "text-danger" })
            </div>
            <script>
                CKEDITOR.replace('detail', {
                    extraPlugins: 'uploadcare'
                });
            </script>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Status, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox" style="margin-left: 20px;">
                    @Html.CheckBoxFor(model => model.Status)
                    @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.TopHot, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <input type="datetime-local" id="tophot" class="form-control" value="@ViewBag.TopHot"/>
                @Html.HiddenFor(model => model.TopHot, new { @class = "form-control", @id = "getTophot"})
                @Html.ValidationMessageFor(model => model.TopHot, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" id="updateBtn" value="Update" class="btn btn-default" />
                <button type="button" class="btn btn-default">@Html.ActionLink("Back", "Index")</button>
            </div>
        </div>
    </div>
}

<script>
    $("#updateBtn").click(function (e) {

        if ($("#price").val() == "") {
            alertify.set('notifier', 'position', 'top-right');
            alertify.error("Input price please!!!");
            e.preventDefault();
        }

        if (!isNaN($("#price").val())) {
            if (Number.parseFloat($("#price").val()) < 0) {
                alertify.set('notifier', 'position', 'top-right');
                alertify.error("Price must be greater or equal 0!!!");
                e.preventDefault();
            }
        }
        else {
            alertify.set('notifier', 'position', 'top-right');
            alertify.error("Wrong format price!!!");
            e.preventDefault();
        }
    })
</script>

@section childJavascript{
    $("#tophot").change(function(){
        $("#getTophot").val($("#tophot").val())
    })

    setInterval(function () {
        $("#meta-title").val(change_alias($("#name").val()))
        var item1 = $("#more-image-1").val();
        var item2 = $("#more-image-2").val();
        var item3 = $("#more-image-3").val();
        $("#content-more-image").val(item1 + "|" + item2 + "|" + item3);
    }, 0)

    function change_alias(alias) {
    var str = alias;
    str = str.toLowerCase();
    // str = str.replace("//s+", "-");
    str = str.replace(/à|á|ạ|ả|ã|â|ầ|ấ|ậ|ẩ|ẫ|ă|ằ|ắ|ặ|ẳ|ẵ/g, "a");
    str = str.replace(/è|é|ẹ|ẻ|ẽ|ê|ề|ế|ệ|ể|ễ/g, "e");
    str = str.replace(/ì|í|ị|ỉ|ĩ/g, "i");
    str = str.replace(/ò|ó|ọ|ỏ|õ|ô|ồ|ố|ộ|ổ|ỗ|ơ|ờ|ớ|ợ|ở|ỡ/g, "o");
    str = str.replace(/ù|ú|ụ|ủ|ũ|ư|ừ|ứ|ự|ử|ữ/g, "u");
    str = str.replace(/ỳ|ý|ỵ|ỷ|ỹ/g, "y");
    str = str.replace(/đ/g, "d");
    str = str.replace(/\s+/g, "-");
    str = str.trim();
    return str;
    }
}